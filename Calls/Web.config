<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=301880
  -->
<configuration>
  <configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>
  
  <!-- You don't actually have to have a connection string in the Web.config file. If you don't supply a connection string, 
  Entity Framework will use a default one based on your context class.   For more information, see Code First to a New Database.    
  -->
  <connectionStrings>

    <!-- Set up EF to use a SQL Server Express LocalDB database
    LocalDB is a lightweight version of the SQL Server Express Database Engine. It's easy to install and configure, starts on demand, and runs in user mode. 
    LocalDB runs in a special execution mode of SQL Server Express that enables you to work with databases as .mdf files. 
    You can put LocalDB database files in the App_Data folder of a web project if you want to be able to copy the database with the project. 
    The user instance feature in SQL Server Express also enables you to work with .mdf files, but the user instance feature is deprecated; 
    therefore, LocalDB is recommended for working with .mdf files. In Visual Studio 2012 and later versions, LocalDB is installed by default with Visual Studio. 

    Typically SQL Server Express is not used for production web applications. 
    LocalDB in particular is not recommended for production use with a web application because it is not designed to work with IIS.
  
    If you wanted the database to be created in your App_Data folder, you could add AttachDBFilename=|DataDirectory|\ContosoUniversity1.mdf to the connection string.  
    -->
    <add name="DefaultConnection" 
         connectionString="Data Source=(LocalDb)\v11.0;
                           AttachDbFilename=|DataDirectory|\aspnet-Calls-20131122104033.mdf;
                           Initial Catalog=aspnet-Calls-20131122104033;                           
                           Integrated Security=True"
         providerName="System.Data.SqlClient" />
  </connectionStrings>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
  </appSettings>
  <system.web>
    <authentication mode="None" />
    <compilation debug="true" targetFramework="4.5" />
    <httpRuntime targetFramework="4.5" />
  </system.web>
  <system.webServer>
    <modules>
      <remove name="FormsAuthenticationModule" />
    </modules>
  </system.webServer>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-1.5.2.14234" newVersion="1.5.2.14234" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <entityFramework>
    <!--  See Database Initializers http://msdn.microsoft.com/en-us/data/jj556606. Don't use: Screws up deployment     
      To tell Entity Framework to use your initializer class, add an element to the entityFramework element in the application Web.config file 
      (the one in the root project folder), as shown in the following example: 
    <contexts>      
      <context type="Calls.Models.ApplicationDbContext, Calls" disableDatabaseInitialization="false">
        <databaseInitializer type="Calls.Models.SampleData, Calls" />
      </context>
    </contexts>  -->  
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
</configuration>